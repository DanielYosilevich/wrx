{"version":3,"sources":["components/NavBar.js","pages/AboutPage.js","pages/HomePage.js","routes.js","App.js","assets/worker/serviceWorker.js","index.js"],"names":["withRouter","props","Fragment","className","onClick","history","push","About","Home","state","value","children","val","c","this","setState","items","id","label","shouldItemRender","item","toLowerCase","indexOf","getItemValue","renderItem","highlighted","key","style","backgroundColor","onChange","e","target","onSelect","toShow","appendChild","map","child","index","React","Component","routes","path","exact","component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mNAgBeA,eAbA,SAACC,GACZ,OACI,kBAAC,IAAMC,SAAP,KACI,yBAAKC,UAAU,kBACX,4BAAQC,QAAS,kBAAMH,EAAMI,QAAQC,KAAK,OAA1C,SACA,8CACA,4BAAQF,QAAS,kBAAMH,EAAMI,QAAQC,KAAK,YAA1C,WAEJ,iCCCGC,EAVD,WACV,OACI,kBAAC,IAAML,SAAP,KACI,yBAAKC,UAAa,iBACd,8C,iECmDDK,E,2MApDXC,MAAQ,CACJC,MAAO,GACPC,SAAU,I,2EAGFC,GACR,IAAIC,EAAIC,KAAKL,MAAME,SACnBG,KAAKC,SAAS,CACVJ,SAAS,GAAD,mBACDE,GADC,CAEJ,gCAASD,S,+BAKX,IAAD,OACL,OACI,kBAAC,IAAMV,SAAP,KACI,kBAAC,IAAD,CACIc,MAAO,CACH,CAAEC,GAAI,MAAOC,MAAO,OACpB,CAAED,GAAI,MAAOC,MAAO,OACpB,CAAED,GAAI,MAAOC,MAAO,QAExBC,iBAAkB,SAACC,EAAMV,GAAP,OAAiBU,EAAKF,MAAMG,cAAcC,QAAQZ,EAAMW,gBAAkB,GAC5FE,aAAc,SAAAH,GAAI,OAAIA,EAAKF,OAC3BM,WAAY,SAACJ,EAAMK,GAAP,OACR,yBACIC,IAAKN,EAAKH,GACVU,MAAO,CAAEC,gBAAiBH,EAAc,OAAS,gBAEhDL,EAAKF,QAGdR,MAAOI,KAAKL,MAAMC,MAClBmB,SAAU,SAAAC,GAAC,OAAI,EAAKf,SAAS,CAAEL,MAAOoB,EAAEC,OAAOrB,SAC/CsB,SAAU,SAAAtB,GACN,EAAKK,SAAS,CAAEL,MAAOA,EAAOuB,QAAQ,IACtC,EAAKC,YAAYxB,MAKzB,yBAAKP,UAAU,iBACVW,KAAKL,MAAME,SAASwB,KAAI,SAACC,EAAMC,GAAP,OAAiB,0BAAMX,IAAOW,GAAb,IAAsBD,Y,GA9CjEE,IAAMC,WCSVC,EANX,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWnC,IACjC,kBAAC,IAAD,CAAOiC,KAAK,SAASE,UAAWpC,KCUzBqC,MAdf,WACE,OACE,yBAAKzC,UAAU,OACb,gCACE,kBAAC,EAAD,OAEF,8BAEGqC,KCAWK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCXNC,IAASC,OACL,kBAAC,IAAD,KACI,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDsHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ca5fff6a.chunk.js","sourcesContent":["import React from \"react\"\r\nimport { withRouter } from 'react-router-dom'\r\n\r\nconst NavBar = (props) => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className=\"navbar-wrapper\">\r\n                <button onClick={() => props.history.push('/')}> Home</button>\r\n                <span>Frontend App</span>\r\n                <button onClick={() => props.history.push('/about')}> About</button>\r\n            </div>\r\n            <hr />\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default withRouter(NavBar)","import React from 'react'\r\n\r\nconst About = () => {\r\n    return (\r\n        <React.Fragment>\r\n            <div className = {\"about-wrapper\"}>\r\n                <div>About Page</div>\r\n            </div>\r\n        </React.Fragment>\r\n    )\r\n}\r\n\r\nexport default About","import React from 'react'\r\nimport ReactAutocomplete from \"react-autocomplete\";\r\n\r\nclass Home extends React.Component {\r\n\r\n    state = {\r\n        value: '',\r\n        children: []\r\n    }\r\n\r\n    appendChild(val){\r\n        var c = this.state.children;\r\n        this.setState({\r\n            children: [\r\n                ...c,\r\n                <button>{val}</button>\r\n            ]\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <React.Fragment>\r\n                <ReactAutocomplete\r\n                    items={[\r\n                        { id: 'foo', label: 'foo' },\r\n                        { id: 'bar', label: 'bar' },\r\n                        { id: 'baz', label: 'baz' },\r\n                    ]}\r\n                    shouldItemRender={(item, value) => item.label.toLowerCase().indexOf(value.toLowerCase()) > -1}\r\n                    getItemValue={item => item.label}\r\n                    renderItem={(item, highlighted) =>\r\n                        <div\r\n                            key={item.id}\r\n                            style={{ backgroundColor: highlighted ? '#eee' : 'transparent' }}\r\n                        >\r\n                            {item.label}\r\n                        </div>\r\n                    }\r\n                    value={this.state.value}\r\n                    onChange={e => this.setState({ value: e.target.value })}\r\n                    onSelect={value => {\r\n                        this.setState({ value: value, toShow: true });\r\n                        this.appendChild(value);\r\n                    }\r\n                    }\r\n                />\r\n\r\n                <div className=\"box-container\">\r\n                    {this.state.children.map((child,index) => <span key = {index}> {child}</span>)}\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Home","import React from 'react'\r\nimport { Route, Switch } from 'react-router-dom'\r\nimport About from './pages/AboutPage'\r\nimport Home from './pages/HomePage'\r\n\r\nconst routes = (\r\n    <Switch>\r\n        <Route path=\"/\" exact component={Home} />\r\n        <Route path=\"/about\" component={About} />\r\n    </Switch>\r\n);\r\n\r\nexport default routes;","import React from 'react';\r\nimport NavBar from './components/NavBar'\r\nimport routes from './routes'\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <NavBar />\r\n      </header>\r\n      <main>\r\n        {/* Learn React */}\r\n        {routes}\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './assets/scss/global.scss'\r\nimport App from './App';\r\nimport * as serviceWorker from './assets/worker/serviceWorker'\r\nimport { BrowserRouter as Router } from 'react-router-dom'\r\n\r\nReactDOM.render(\r\n    <Router>\r\n        <App />\r\n    </Router>\r\n    , document.getElementById(\"root\")\r\n);\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}